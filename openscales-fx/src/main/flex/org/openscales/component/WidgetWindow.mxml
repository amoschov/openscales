<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	minWidth="{widgetBar.width}"
	showEffect="{showControl}" hideEffect="{hideControl}"
	initialize="{currentState='defaultState';}"
	creationComplete="invalidateProperties();">

	<!-- Inspired from http://www.munkiihouse.com/flexapps/CustomFormItem/Main.html view source -->

    <!-- Set "children" to be the default property so we can easily set it from mxml -->
    <mx:Metadata>
        [DefaultProperty("children")]
    </mx:Metadata>

	<mx:Script>
		<![CDATA[
			private var _children:Array = [];
			private var _childrenChanged:Boolean = false;
			
			/**
			 * Set the 'content' of this component, and then call invalidateProperties
			 * 
			 * Note that if only one child is defined in mxml, then that child
			 * itself is passed in.
			 * If more than one child is defined, then an Array is passed in.
			 */
			public function set children(value:*):void {
				if (value is DisplayObject) {
					_children = [ value ];
				} else {
					_children = value;
				}
				_childrenChanged = true;
				invalidateProperties(); // so flex calls the commitProperties()
            }
            public function get children():Array {
				return _children;
			}
			
			/**
			 * The commit properties phase is the best time to add the children
			 * to their intended target
			 */
			protected override function commitProperties():void {
				super.commitProperties();
				if(_childrenChanged && widgetContentBox) {
					for each(var child:DisplayObject in _children) {
						if (child) {
							widgetContentBox.addChild(child);
						}
					}
					_childrenChanged = false;
				}
			}
			
			/**
			 * Getter & setter for the title of the WidgetWindow
			 */
			[Bindable] private var _widgetTitle:String = "";
			public function get widgetTitle():String {
				return _widgetTitle;
			}
			public function set widgetTitle(value:String):void {
				_widgetTitle = value;
			}

			/**
			 * Getter & setter for the description of the WidgetWindow
			 */
			[Bindable] private var _toolTipIconEnd:String = "the widget";
			public function get toolTipIconEnd():String {
				return _toolTipIconEnd;
			}
			public function set toolTipIconEnd(value:String):void {
				_toolTipIconEnd = value;
			}
			
			/**
			 * Getter & setter for the usage of the closing button
			 */
			[Bindable] private var _useCloseButton:Boolean = false;
			public function get useCloseButton():Boolean {
				return _useCloseButton;
			}
			public function set useCloseButton(value:Boolean):void {
				_useCloseButton = value;
			}

			/**
			 * Getter & setter for the duration of the show/hide effects of the WidgetWindow
			 */
			[Bindable] private var _duration:int = 1000;
			public function get duration():int {
				return _duration;
			}
			public function set duration(value:int):void {
				_duration = value;
			}
			
			/**
			 * Show/Hide the content of the WidgetWindow.
			 * The icon always stays visible
			 */
			[Embed(source='/images/widgetHide.png')] private var iconWidgetHide:Class;
			[Embed(source='/images/widgetShow.png')] private var iconWidgetShow:Class;
			private function toggleWidgetContent(widget:DisplayObject):void {
				if (widget.visible) {
					widgetBarIconShowHide.source = new iconWidgetShow();
					widgetBarIconShowHide.toolTip = "Click to show " + _toolTipIconEnd;
				} else {
					widgetBarIconShowHide.source = new iconWidgetHide();
					widgetBarIconShowHide.toolTip = "Click to hide " + _toolTipIconEnd;
				}
				widget.visible = ! widget.visible;
			}
			
			private function closeWidget():void {
				this.visible = false;
			}
		]]>
	</mx:Script>

	<!-- Style -->
	
    <mx:Style>
    	.widgetBar {
			cornerRadius: 6;
			borderStyle: "solid";
			borderColor: #A8A8A8;
			backgroundAlpha: .75;
			dropShadowEnabled: "true";
			shadowDistance: 6;
			shadowDirection: "right";
			backgroundColor: #0B3D6E;
    	}
    	.widgetTitle {
    		color: #FFFFFF;
    		fontWeight: "bold"; 
    	}
    	.widgetContent {
			cornerRadius: 6;
			borderStyle: "solid";
			borderColor: #A8A8A8;
			backgroundAlpha: .75;
			dropShadowEnabled: "true";
			shadowDistance: 6;
			shadowDirection: "right";
			backgroundColor: #F3F3F3;
    	}
    	.widgetContentBox {
			paddingLeft: 6;
			paddingRight: 6;
			paddingTop: 12;
			paddingBottom: 6;
		}
    </mx:Style>
	
	<!-- Effects -->
	
    <mx:Parallel id="showControl" duration="{_duration}">
		<mx:WipeDown />
		<mx:Fade alphaFrom="0.0" alphaTo="1.0" />
    </mx:Parallel>
    
    <mx:Parallel id="hideControl" duration="{_duration}">
		<mx:WipeUp />
		<mx:Fade alphaFrom="1.0" alphaTo="0.0" />
    </mx:Parallel>
	
	<!-- Widget window -->
	
	<mx:states>
		<mx:State name="defaultState">
			<mx:AddChild relativeTo="{this}" position="firstChild">
				<mx:Canvas id="widgetContainer"
					width="100%" height="100%">
					
					<mx:Canvas id="widgetContent"
						width="100%" y="{widgetBar.height-6}"
						showEffect="{showControl}" hideEffect="{hideControl}"
						styleName="widgetContent">
						<mx:VBox id="widgetContentBox"
							width="100%" height="100%"
							horizontalAlign="center" verticalAlign="middle"
							styleName="widgetContentBox">
							<!-- The children of the component are inserted here -->
						</mx:VBox>
					</mx:Canvas>
					
					<mx:Canvas id="widgetBar"
						width="100%" y="0"
						styleName="widgetBar">
						<mx:HBox verticalAlign="middle" width="100%"
							paddingLeft="6" paddingRight="6" horizontalGap="3">
							<mx:Label text="{_widgetTitle}" styleName="widgetTitle" />
							<mx:Spacer width="100%" />
							<mx:Image id="widgetBarIconClose"
								visible="{_useCloseButton}"
								width="16" height="16"
								source="@Embed('/images/widgetClose.png')"
								toolTip="{'Click to close '+_toolTipIconEnd}"
								click="closeWidget();" />
							<mx:Image id="widgetBarIconShowHide"
								width="16" height="16"
								source="@Embed('/images/widgetHide.png')"
								toolTip="{'Click to hide '+_toolTipIconEnd}"
								click="toggleWidgetContent(widgetContent);" />
						</mx:HBox>
					</mx:Canvas>
	
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
</mx:VBox>
