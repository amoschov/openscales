<?xml version="1.0" encoding="utf-8"?>
<Control xmlns="org.openscales.component.control.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.geometry.MultiPoint;
			import org.openscales.core.feature.MultiPointFeature;
			import org.openscales.core.feature.PolygonFeature;
			import org.openscales.core.geometry.LinearRing;
			import org.openscales.core.geometry.Polygon;
			import org.openscales.core.geometry.MultiPolygon;
			import org.openscales.core.geometry.MultiLineString;
			import org.openscales.core.geometry.LineString;
			import org.openscales.core.feature.LineStringFeature;
			import org.openscales.core.feature.MultiPolygonFeature;
			import org.openscales.core.feature.MultiLineStringFeature;
			import org.openscales.core.layer.ogc.WFS;
			import org.openscales.core.layer.FeatureLayer;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.feature.VectorFeature;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.basetypes.Bounds;
			import mx.effects.easing.Bounce;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.basetypes.Pixel;
			import org.openscales.core.basetypes.LonLat;
			import org.openscales.core.handler.mouse.DragHandler;
			import org.openscales.core.handler.Handler;
			import org.openscales.core.Map;
			
			private var lastSelection:LonLat = null;
			private var fillColor:uint = 0x660000;
	        private var drawContainer:Sprite = new Sprite();

			private function activate(evt:DrawingEvent):void{
				this.enabled = true;
			}
			private function deactivate(evt:DrawingEvent):void{
				this.enabled = false;
			}
			
			override public function set map(value:Map):void
          	{
             	super.map = value;
           		map.addChild(drawContainer);
           		this.map.addEventListener(DrawingEvent.ENABLED, deactivate);
				this.map.addEventListener(DrawingEvent.DISABLED, activate);
         	}
			
			/**
			 * Button Click Event
			 * 
			 * @param e Event
			 */
			private function selectBox(e:Event) : void 
			{
				if(selectbox.selected == false)
				{
					selectbox.selected = true;
	            	deactiveDrag();
	            	map.addEventListener(MouseEvent.MOUSE_DOWN,startBox);
	            	map.addEventListener(MouseEvent.MOUSE_UP,endBox); 
				}
				else
				{
					selectbox.selected = false;
	            	activeDrag();
	            	map.removeEventListener(MouseEvent.MOUSE_MOVE,expandArea);
                	map.removeEventListener(MouseEvent.MOUSE_DOWN,startBox);
               		map.removeEventListener(MouseEvent.MOUSE_UP,endBox);
				}    		               	
           	}
           	
           	/**
			 * Mouse Click Event
			 * When we put down the button of the mouse we draw a rectangle
			 * 
			 * @param e MouseEvent
			 */
           	private function startBox(e:MouseEvent) : void 
           	{
                map.addEventListener(MouseEvent.MOUSE_MOVE,expandArea);
                //draw a rectangle
                drawContainer.graphics.beginFill(fillColor,0.5);
                drawContainer.graphics.drawRect(map.mouseX,map.mouseY,1,1);
                drawContainer.graphics.endFill();
                //Get the first rectangle point
                this.lastSelection = this.map.getLonLatFromMapPx(new Pixel(map.mouseX, map.mouseY));
            }
			
			/**
			 * Mouse Click Event
			 * When we put up the button of the mouse we delete the rectangle
			 * 
			 * @param e MouseEvent
			 */
                private function endBox(e:MouseEvent) : void 
                {
                	map.removeEventListener(MouseEvent.MOUSE_MOVE,expandArea);
                	map.removeEventListener(MouseEvent.MOUSE_DOWN,startBox);
               		map.removeEventListener(MouseEvent.MOUSE_UP,endBox);
               		//reactive the drag on the map
               		activeDrag();
               		//delete the rectangle
               		drawContainer.graphics.clear();
               		//Get the last rectangle point
               		var nowSelection:LonLat = this.map.getLonLatFromMapPx(new Pixel(map.mouseX, map.mouseY));
               		featureInclude(new Bounds(Math.min(lastSelection.lon,nowSelection.lon),
               																			Math.min(nowSelection.lat,lastSelection.lat),
               																			Math.max(lastSelection.lon,nowSelection.lon),
               																			Math.max(nowSelection.lat,lastSelection.lat)));
               		selectbox.selected = false;
                }
			
			/**
			 * Mouse Click Event
			 * When we move the mouse we draw a rectangle more or less large
			 * 
			 * @param e MouseEvent
			 */
            private function expandArea(e:MouseEvent) : void 
            {
                var ll:Pixel = map.getMapPxFromLonLat(lastSelection);
                drawContainer.graphics.clear();
                drawContainer.graphics.beginFill(fillColor,0.5);
                drawContainer.graphics.drawRect(ll.x,ll.y,map.mouseX - ll.x,map.mouseY - ll.y);
                drawContainer.graphics.endFill();
            }
            
            /**
            * This function looks for features that are in the rectangle draw previously to select them
            * 
            * @param bounds The rectangle bounds that contain features to select
            */
            public function featureInclude(bounds:Bounds):void 
            {
            	var featuresToSelect:Array = new Array();
            	for(var i:int = 0;i<this.map.layers.length;i++)
            	{
            		//if layer is a feature
            		if(this.map.layers[i] is FeatureLayer){
            			
            			//we count the number of features draw on the map           			
            			for(var k:int = 0;k<(this.map.layers[i] as FeatureLayer).numChildren;k++)
            			{
	            			var feature:Feature = ((this.map.layers[i] as VectorLayer).features[k]);
							
            				if(feature is PointFeature)
            				{ 
            					//We compare the rectangle bounds and the x,y of the feature to see if it is include in the rectangle
            					if((feature as PointFeature).point.x >= bounds.left && (feature as PointFeature).point.x <= bounds.right)
            					{
            						if((feature as PointFeature).point.y <= bounds.top && (feature as PointFeature).point.y >= bounds.bottom)
            						{
            							//We add the feature to the tab
            							featuresToSelect.push(feature);
            						}
            					} 
            				 } 
            				else if(feature is MultiPointFeature)
            				{
            					var multiPoint:MultiPoint = ((feature as MultiPointFeature).points as MultiPoint);
            					for(var j:int = 0;j<multiPoint.components.length;j++)
            					{
            						//We compare the rectangle bounds and the x,y of the feature to see if it is include in the rectangle
            						if(multiPoint.components[j].x >= bounds.left && multiPoint.components[j].x <= bounds.right)
	            					{
	            						if(multiPoint.components[j].y <= bounds.top && multiPoint.components[j].y >= bounds.bottom)
	            						{
	            							//We add the feature to the tab
	            							featuresToSelect.push(feature);
	            							break;
	            						}
	            					}
            					}
            					
            				}
            				else if(feature is MultiLineStringFeature)
            				{
            					var multiLineString:MultiLineString = (feature as MultiLineStringFeature).lineStrings as MultiLineString;
            					for(var l:int = 0;l<multiLineString.components.length;l++)
            					{
            						//We compare the rectangle bounds and the x,y of the feature to see if it is include in the rectangle
            						if((multiLineString.components[l].components[0].x >= bounds.left && multiLineString.components[l].components[0].x <= bounds.right) || (multiLineString.components[l].components[1].x >= bounds.left && multiLineString.components[l].components[1].x <= bounds.right))
            						{
            							if((multiLineString.components[l].components[0].y <= bounds.top && multiLineString.components[l].components[0].y >= bounds.bottom) || (multiLineString.components[l].components[1].y <= bounds.top && multiLineString.components[l].components[1].y >= bounds.bottom))
	            						{	
	            							//We add the feature to the tab
            								featuresToSelect.push(feature);
	            							break;
	            						}
            						}
            					}
            				}
            				else if(feature is PolygonFeature)
            				{
            					var linearRing:LinearRing = ((feature as PolygonFeature).polygon as Polygon).components[0] as LinearRing;
            					for(var m:int = 0;m<linearRing.components.length;m++)
            					{
            						//We compare the rectangle bounds and the x,y of the feature to see if it is include in the rectangle
            						if(linearRing.components[m].x >= bounds.left && linearRing.components[m].x <= bounds.right)
            						{
            							if(linearRing.components[m].y <= bounds.top && linearRing.components[m].y >= bounds.bottom)
	            						{	
	            							//We add the feature to the tab
            								featuresToSelect.push(feature);
	            							break;
	            						}
            						}
            					}
            				}
            				else if(feature is MultiPolygonFeature)
            				{
            					var multiPolygon:MultiPolygon = ((feature as MultiPolygonFeature).polygons as MultiPolygon);
            					for(var n:int;n<multiPolygon.components.length;n++)
            					{
            						linearRing = (multiPolygon.components[n] as Polygon).components[0] as LinearRing;
            						for(var p:int = 0;p<linearRing.components.length;p++)
	            					{
	            						//We compare the rectangle bounds and the x,y of the feature to see if it is include in the rectangle
	            						if(linearRing.components[p].x >= bounds.left && linearRing.components[p].x <= bounds.right)
	            						{
	            							if(linearRing.components[p].y <= bounds.top && linearRing.components[p].y >= bounds.bottom)
		            						{	
		            							//We add the feature to the tab
            									featuresToSelect.push(feature);
		            							break;
		            						}
	            						}
	            					}
            					}
            				}
            			}
            			this.map.dispatchEvent(new FeatureEvent(FeatureEvent.FEATURE_SELECTEDBOX,featuresToSelect));
            		}
            	}
            }

            public function activeDrag():void{
                var handler:Handler;
                for each(handler in this.map.handlers){
                    if(handler is DragHandler){handler.active = true;}
            	}
            }

            public function deactiveDrag():void{
                var handler:Handler;
                for each(handler in this.map.handlers){
                    if(handler is DragHandler){handler.active = false;}
                }
            }               
		]]>
	</mx:Script>
	
	
	<mx:Button id="selectbox" label="SelectBox" selected="false" click="selectBox(event)"/>
</Control>
