<?xml version="1.0" encoding="utf-8"?>
<control:Control xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:control="org.openscales.component.control.*"
	xmlns:os="http://openscales.org" creationComplete="initTab();"
	width="330" height="330">
		
	<mx:Script>
		<![CDATA[
			import org.openscales.core.handler.mouse.SelectFeature;
			import mx.events.CloseEvent;
			import org.openscales.core.feature.VectorFeature;
			import org.openscales.core.geometry.Polygon;
			import org.openscales.core.feature.Style;
			import org.openscales.core.feature.Feature;
			import flash.sampler.NewObjectSample;
			import org.openscales.core.handler.mouse.DragHandler;
			import mx.controls.ToggleButtonBar;
			import mx.events.ItemClickEvent;
			import org.openscales.core.events.FeatureEvent;
			import flash.utils.getQualifiedClassName;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.handler.sketch.DrawPolygonHandler;
			import org.openscales.core.handler.sketch.DrawPathHandler;
			import mx.controls.Alert;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.handler.Handler;
			import org.openscales.core.handler.sketch.DrawPointHandler;
			import org.openscales.core.geometry.Geometry;
			
			import org.openscales.core.Map;
			
			
			public var drawLayer:VectorLayer = new VectorLayer("Sketch");			
			public var pointHandler:DrawPointHandler = new DrawPointHandler(null, false, drawLayer);
			public var polygonHandler:DrawPolygonHandler = new DrawPolygonHandler(null, false, drawLayer);
			public var pathHandler:DrawPathHandler = new DrawPathHandler(null,false,drawLayer);
					
			public var oldFeature:org.openscales.core.feature.VectorFeature;
			public var selectStyle:Style = new Style();
			public var oldStyle:Style = new Style();
			public var first:Boolean = true;
			
			private var _drawType:String = "";
			

			public function initTab():void{
				this.featureInfo.map = this.map;
				this.tgBar.selectedIndex = -1; 
			}

			public function onDeleteSelectedClick(event:Event):void {
				Alert.show("Are you sure ?", "Warning", Alert.YES | Alert.NO, null, alertClickHandler);				
			}
			
			private function alertClickHandler(event:CloseEvent):void {
                if (event.detail==Alert.YES){
                	deleteSelectedFeatures(); 
                }                  
            }
			
			private function deleteSelectedFeatures():void {
				var feat:org.openscales.core.feature.VectorFeature;
				var i:Number = 0;
				for(i;i<drawLayer.features.length;i++){
					feat = drawLayer.features[i];
					if(feat.selected){
						drawLayer.removeFeatures(drawLayer.features[i]);
						i--;
					}
				}
				drawLayer.renderer.clear();
				drawLayer.redraw();
				btnDeleteSelected.enabled = false;
			}

			public function onDeleteAllClick(event:Event):void {
				drawLayer.destroyFeatures();
				drawLayer.renderer.clear();
				oldFeature = null;
				
				switch(drawType)
				{
					case "path":{pathHandler.newFeature = true; break;}
					case "polygon":{polygonHandler.newFeature = true; break;}
				}
			}
			
			public function onDeleteLastClick(event:Event):void {
				var last:Number = drawLayer.features.length - 1;
				var lastFeature:VectorFeature = null;
				
				if (last >= 0) {	
					
					lastFeature = drawLayer.features[last];
					drawLayer.removeFeatures(drawLayer.features[last]);
								
					switch(drawType)
					{
						case "path":		
													
							if (last - 1 >= 0 && getQualifiedClassName(drawLayer.features[last-1].geometry) == "org.openscales.core.geometry::LineString") {
								pathHandler.lastPoint = drawLayer.features[last-1].geometry.getLastPoint();
							}
							else {
								pathHandler.newFeature = true;
							}
							break;	
												
						case "polygon":

							if (last-1 >= 0 && !polygonHandler.firstPointRemoved && !polygonHandler.newFeature) {
								drawLayer.removeFeatures(drawLayer.features[last - 1]);
							}
							polygonHandler.newFeature = true;
							
							break;
					}   
				}
				else {
					Alert.show("There are not features to delete !", "Message");
					oldFeature = null;
				}
			}
			
			public function selectFeature(event:FeatureEvent):void {
				
				if(!pathHandler.active && !polygonHandler.active && !pointHandler.active && featureInfo != null) {
					
					btnDeleteSelected.enabled = true;
					var currentFeature:org.openscales.core.feature.VectorFeature;
					var f:org.openscales.core.feature.VectorFeature;				
					currentFeature = event.vectorfeature;
					
					if(oldFeature != null && oldFeature != currentFeature){		
						if(event.ctrlPressed){
							oldFeature.selected = true;
							currentFeature.selected = true;
						}
						else{
							for each(f in drawLayer.features)
							{
								if(f.selected){
									f.style = oldStyle;
								}
							}
							oldFeature.style = oldStyle; 
							oldStyle = currentFeature.style;
							oldFeature.layer.redraw();
							oldFeature.selected = false;
						}	
					}
					else if(first){first=false;oldStyle=currentFeature.style;}
						
					selectStyle.fillColor = 0xFFD700;
					selectStyle.strokeColor = 0xFFD700;
					
					currentFeature.style = selectStyle;							 
					currentFeature.selected = true;
					currentFeature.layer.redraw();
				 
					this.featureInfo.showInfo(event);
					
					oldFeature = currentFeature;															
				}
			}
			
			override public function set map(value:Map):void {
				super.map = value;
				
				if (this.map != null) {
					pointHandler.map = this.map;
					pathHandler.map = this.map;
					polygonHandler.map = this.map
					this.map.addLayer(drawLayer);
				}
				this.map.addEventListener(FeatureEvent.FEATURE_CLICK, selectFeature);
			}
			
			private function clickHandler(event:ItemClickEvent):void{
				var handler:Number = event.index;		// handler is a number because of toggleButtonBar
				var h:Handler;
				for each(h in this.map.handlers){
					if(h is DragHandler){
						h.active = false;
					} 
				}			
				
				switch(handler)
				{
					case 0:		//click on button point
						if(drawType!="point"){
							if(pathHandler.active){
								this.finishPath();
							}else if(polygonHandler.active){
								this.finishPolygon();
							}												
							pointHandler.active = true;
							drawType = "point";
						}
						else{
							drawType = "";
							pointHandler.active = false;
							this.tgBar.selectedIndex = -1;
							this.activeDrag();
						}						
						break;
					
					case 1:		//click on button path
						if(drawType!="path"){
							if(polygonHandler.active){
								this.finishPolygon();
							}						
							pointHandler.active = false;
							pathHandler.active = true;
							drawType = "path";
						}
						else{
							drawType = "";
							finishPath();
							this.tgBar.selectedIndex = -1;
							activeDrag(); 
						}
						break;
						
					case 2:		//click on button polygon
						if(drawType!="polygon"){
							if(pathHandler.active){
								this.finishPath();
							}						
							pointHandler.active = false;
							polygonHandler.active = true;
							drawType = "polygon";
						}
						else{
							drawType = "";
							this.finishPolygon();
							this.tgBar.selectedIndex = -1;
							this.activeDrag(); 
						}
						break;
				}
			}
			
			public function finishPolygon():void{
				polygonHandler.drawFinalPoly();
				polygonHandler.active = false;
			}
			
			public function finishPath():void{
				pathHandler.drawFinalPath();
				pathHandler.active = false;
			}
			
			public function activeDrag():void{
				var h:Handler;
				for each(h in this.map.handlers){
					if(h is DragHandler){
						h.active = true;
					}
				} 
			}
			
			public function get drawType():String{
				return _drawType;
			}
			public function set drawType(value:String):void{
				_drawType = value;
			}
		]]>
	</mx:Script>
	
	<mx:ToggleButtonBar x="10" y="10" horizontalGap="5" itemClick="clickHandler(event);" horizontalAlign="center" selectedIndex="-1" id="tgBar">
		<mx:Array>
			<mx:Object icon="@Embed('/org/openscales/component/images/IconeDessinPoint.swf')" id="btnPoint"/>
			<mx:Object icon="@Embed('/org/openscales/component/images/IconeDessinLigne.swf')" id="btnPath"/>
			<mx:Object icon="@Embed('/org/openscales/component/images/IconeDessinPoly.swf')" id="btnPolygon"/>
		</mx:Array>
	</mx:ToggleButtonBar>	
	
	<mx:Button x="10" y="78" label="DeleteAll" id="btnDeleteAll" click="this.onDeleteAllClick(event)" width="104"/>
	<mx:Button x="10" y="48" label="DeleteLast" width="104" id="btnDeleteLast" click="this.onDeleteLastClick(event)"/>
	<mx:Button label="DeleteSelected" width="118" id="btnDeleteSelected" click="this.onDeleteSelectedClick(event)" x="175" y="78" enabled="false"/>
		
	<mx:Text x="160" y="5" text="Tooltip : to finalize a path or a polygon just double click on map." width="143" height="46" fontStyle="italic"/>
	<mx:Text text="For the moment, you can't delete WFS points, even if they are selected." fontStyle="italic" width="143" x="160" y="108" textAlign="center"/>

	<control:FeatureInfo id="featureInfo" x="10" y="155" width="310" height="165"/>
	
</control:Control>