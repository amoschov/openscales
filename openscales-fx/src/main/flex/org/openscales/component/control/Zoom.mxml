<?xml version="1.0" encoding="utf-8"?>
<control:Control xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:control="org.openscales.component.control.*" >
	
	<mx:Script>
		<![CDATA[
			import org.openscales.core.events.MapEvent;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.basetypes.Pixel;
			import org.openscales.core.Map;
			import com.gskinner.motion.GTweeny;
			import mx.events.SliderEvent;
					
			private function onZoomOutClick(event:MouseEvent):void{
				this.map.zoom--;
			}
			
			private function onZoomInClick(event:MouseEvent):void{
				this.map.zoom++;
			}
			
			public function onZoomSliderThumbPress(event:SliderEvent):void {
				zoomSlider.removeEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
				zoomSlider.addEventListener(SliderEvent.THUMB_RELEASE,this.onZoomSliderThumbRelease);
			}
			
			public function onZoomSliderThumbRelease(event:SliderEvent):void {
				map.zoom = zoomSlider.value;
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
			
			public function zoomSliderChange(event:Event):void {
				map.zoom = zoomSlider.value;
			}
			
			private function initializeZoomLevels(event:Event = null):void {
				var zoomLevels:Array = new Array();
				for(var i:int = 0; i<map.resolutions.length; i++) {
					zoomLevels.push(map.getZoomForResolution(map.resolutions[i]));
				}
				zoomSlider.tickValues = zoomLevels;
				zoomSlider.maximum = map.getZoomForResolution(map.minResolution);
				zoomSlider.minimum = map.getZoomForResolution(map.maxResolution);
				zoomSlider.value = map.zoom;
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
			
			override public function set active(value:Boolean):void {
				if(value) {
					initializeZoomLevels();
					map.addEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.addEventListener(MapEvent.ZOOM_END, this.updateZoomLevels);
				} else {
					map.removeEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.removeEventListener(MapEvent.ZOOM_END, this.updateZoomLevels);
				}
				super.active = value;
			}
			
			private function updateZoomLevels(event:Event = null):void {
				zoomSlider.value = map.zoom;
			}
		]]>
	</mx:Script>
	
	<mx:Style>
		.zoomSliderStyle {
		}
	</mx:Style>
	
	<mx:VBox horizontalAlign="center" verticalGap="2">
		<mx:Button id="zoomIn" width="16" height="16"
			toolTip="Zoom in"
			upSkin="@Embed('/org/openscales/component/images/mapZoomIn-upskin.swf')"
			overSkin="@Embed('/org/openscales/component/images/mapZoomIn-upskin.swf')"
			downSkin="@Embed('/org/openscales/component/images/mapZoomIn-upskin.swf')"
			disabledSkin="@Embed('/org/openscales/component/images/mapZoomIn-upskin.swf')"
			useHandCursor="true" buttonMode="true"
			click="this.onZoomInClick(event);" />
		<mx:VSlider id="zoomSlider"
			toolTip="Set the scale of the map"
			liveDragging="true" allowTrackClick="true"
			tickInterval="1" snapInterval="1"
			thumbPress="this.onZoomSliderThumbPress(event)"
			useHandCursor="true" buttonMode="true"
			styleName="zoomSliderStyle" />
		<mx:Button id="zoomOut" width="16" height="16"
			toolTip="Zoom out"
			upSkin="@Embed('/org/openscales/component/images/mapZoomOut-upskin.swf')"
			overSkin="@Embed('/org/openscales/component/images/mapZoomOut-upskin.swf')"
			downSkin="@Embed('/org/openscales/component/images/mapZoomOut-upskin.swf')"
			disabledSkin="@Embed('/org/openscales/component/images/mapZoomOut-upskin.swf')"
			useHandCursor="true" buttonMode="true"
			click="this.onZoomOutClick(event);" />
	</mx:VBox>

</control:Control>
