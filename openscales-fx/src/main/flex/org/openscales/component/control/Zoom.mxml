<?xml version="1.0" encoding="utf-8"?>
<control:Control xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:control="org.openscales.component.control.*" 
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 >
	
	<fx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			
			import org.openscales.basetypes.Pixel;
			import org.openscales.core.Map;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			
			import spark.events.TrackBaseEvent;
			
			[Bindable] private var _toolTipZoomIn:String = "Zoom In";
			[Bindable] private var _toolTipZoomOut:String = "Zoom Out";
			[Bindable] private var _toolTipZoomSlider:String = "Set the scale of the map";
			[Bindable] private var _showDataTip:Boolean = true;
			
			public function set showDataTip(value:String):void
			{
				if(value == true)
				{
					this._showDataTip = true;
				}
				else
				{
					this._showDataTip = false;
				}
			}
			
			private function onZoomOutClick(event:MouseEvent):void{
				this.map.zoom--;
			}
			
			private function onZoomInClick(event:MouseEvent):void{
				this.map.zoom++;
			}
			
			public function onZoomSliderThumbPress():void {
				zoomSlider.removeEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
				zoomSlider.addEventListener(SliderEvent.THUMB_RELEASE,this.onZoomSliderThumbRelease);
			}
			
			public function onZoomSliderThumbRelease():void {
				map.zoom = zoomSlider.value;
				
				if(map.zoom!=zoomSlider.value)  zoomSlider.value=map.zoom;
				
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
			
			public function zoomSliderChange(event:Event):void {
				map.zoom = zoomSlider.value;
			}
			
			private function initializeZoomLevels(event:Event = null):void {
				zoomSlider.maximum = map.baseLayer.maxZoomLevel;
				zoomSlider.minimum = map.baseLayer.minZoomLevel;
				zoomSlider.value = map.zoom;
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
			
			override public function set active(value:Boolean):void {
				if(value) {					
					map.addEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.addEventListener(MapEvent.ZOOM_END, this.updateZoomLevels);
					initializeZoomLevels();								
				} else {
					map.removeEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.removeEventListener(MapEvent.ZOOM_END, this.updateZoomLevels);
				}
				super.active = value;
			}
			
			private function updateZoomLevels(event:Event = null):void {
				zoomSlider.value = map.zoom;
			}
			
			public function set toolTipZoomIn(value:String):void{ 
				this._toolTipZoomIn = value;
			}
			
			public function set toolTipZoomOut(value:String):void{ 
				this._toolTipZoomOut = value;
			}
			
			public function set toolTipZoomSlider(value:String):void{ 
				this._toolTipZoomSlider = value;
			}
		]]>
	</fx:Script>
	
	<s:HGroup verticalAlign="middle">
		
		<s:VGroup height="100%">
			
			<s:Button id="zoomIn"
					  label="+"
					  toolTip="{this._toolTipZoomIn}"
					  useHandCursor="true"
					  buttonMode="true"
					  click="this.onZoomInClick(event);"
					  width="30"/>
			<mx:Spacer height="100%" />
			<s:Button id="zoomOut"
					  label="-"
					  toolTip="{this._toolTipZoomOut}"
					  useHandCursor="true"
					  buttonMode="true"
					  click="this.onZoomOutClick(event);"
					  width="30"/>
		</s:VGroup>
		
		<s:VSlider id="zoomSlider"
				   toolTip="{this._toolTipZoomSlider}"
				   height="100"
				   liveDragging="true"
				   snapInterval="1"
				   thumbRelease="this.onZoomSliderThumbRelease();"
				   useHandCursor="true"
				   buttonMode="true"
				   showDataTip="{this._showDataTip}"
				   
				   />
		
	</s:HGroup>
	
</control:Control>
