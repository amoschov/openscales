<?xml version="1.0" encoding="utf-8"?>
<control:Control xmlns:control="org.openscales.component.control.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="276" height="108" creationComplete="initFeatureDrawing();">
	<mx:Script>
		<![CDATA[
			import org.openscales.core.events.SpriteCursorEvent;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.feature.VectorFeature;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.handler.mouse.DragHandler;
			import org.openscales.core.handler.Handler;
			import mx.controls.Alert;
			import org.openscales.core.handler.mouse.SelectFeature;
			import org.openscales.core.handler.sketch.DrawMultiHandler;
			import org.openscales.core.handler.sketch.DrawPathHandler;
			import org.openscales.core.handler.sketch.DrawPolygonHandler;
			import org.openscales.core.handler.sketch.DrawPointHandler;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.Map;
			import org.openscales.core.feature.Style;
			import org.openscales.core.events.FeatureEvent;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			
			/**
			 * Type of drawing (point, path or polygon)
			 */
			private var _drawType:String = "";
			
			/**
			 * Index of the tab Drawing, default : -1
			 */
			private var _indexTabDrawing:Number = -1;
			
			/**
			 * Layer of drawing, which contains all drawing features
			 */
			public var drawLayer:VectorLayer = new VectorLayer("Drawings");
			
			/**
			 * Handler of PointFeature
			 */		
			public var pointHandler:DrawPointHandler = new DrawPointHandler(null, false, drawLayer);
			
			/**
			 * Handler of PolygonFeature
			 */
			public var polygonHandler:DrawPolygonHandler = new DrawPolygonHandler(null, false, drawLayer);
			
			/**
			 * Handler of PathFeature
			 */
			public var pathHandler:DrawPathHandler = new DrawPathHandler(null,false,drawLayer);
			
			/**
			 * Handler of MultipointFeature
			 */
			public var multiPointHandler:DrawMultiHandler = new DrawMultiHandler(null, false, drawLayer);
			
			/**
			 * Dragging state
			 */
			private var _isDragging:Boolean = false;	//To know if the feature is dragging
				
			/**
			 * Mouse handlers
			 */
			public var selectFeatureHandler:SelectFeature;  //to select features
			
			/**
			 * Initiate all properties and handlers
			 * Be careful with handlers : You have to manage all handler, in order to activate or deactivate them when it's necessary.
			 * Don't let a handler active if it's not necessary. 
			 */
			public function initFeatureDrawing():void{	
				
				//Properties of selectFeatureHandler
				this.selectFeatureHandler = new SelectFeature(this.map,drawLayer,true);
				this.selectFeatureHandler.select = onSelectFeature;
				this.selectFeatureHandler.selectBySelectBox = onSelectBySelectBox; 
				
				//Properties of MultiHandler
				this.multiPointHandler.map = this.map;
				 				 
				//Active drag feature
				/* this.dragfeature = new DragFeature(this.map,[drawLayer],true); */				  										
			}
			
			/**
			 * Allow you to merge different selected feature in one.
			 * You can't merge a polygon and a point (for example), All features must be the same geometry
			 */
			private function OnMergeClick(event:MouseEvent):void {
				
				/* tab of selected features in params, return a multigeometry of this selected features */					
				var feature:VectorFeature = multiPointHandler.buttonClicked(selectFeatureHandler.selectFeatures) as VectorFeature;
				selectFeatureHandler.currentfeature = feature;				
				selectFeatureHandler.OnSelection();
				selectFeatureHandler.selectFeauturesLength++;
				btnMerge.enabled = false;
				
			}
			
			/**
		 	 * Show a warning message when you delete selected feature. User can cancel if it's a mistake
		 	 */
			public function onDeleteSelectedClick(event:Event):void {
				Alert.show("You want to delete selected feature(s). \nAre you sure ?", "Warning", Alert.YES | Alert.NO, null, alertClickHandler);				
			}
			
			/**
			 * Check the user's answer
			 * (Called by onDeleteSelectedClick method)
			 */
			private function alertClickHandler(event:CloseEvent):void {
                // User click on "YES", he wants to apply changes
                if (event.detail==Alert.YES){
                	deleteSelectedFeatures(); 
                }                  
            }
			
			/**
			 * User clicks on delete selected feature button
			 */
			private function deleteSelectedFeatures():void {
				var feature:VectorFeature;
				var i:Number = 0;
				var featureToDelete:Array = new Array();
				
				for(i;i<this.selectFeatureHandler.selectFeatures.length;i++){
					feature = this.selectFeatureHandler.selectFeatures[i];
					if(feature != null){
						feature.selected = false;feature.style = feature.originalStyle;
						featureToDelete.push(feature);
						feature.layer.redraw();
						this.selectFeatureHandler.selectFeatures[i] = null;
					}
				}
				this.drawLayer.removeFeatures(featureToDelete)			
				btnDeleteSelected.enabled = false;
				btnMerge.enabled = false;
				//clear the information tab
				this.map.dispatchEvent(new FeatureEvent(FeatureEvent.FEATURE_UNSELECTED, new Array(this.selectFeatureHandler.currentfeature)));
			}

			/**
			 * User clicks on delete all button
			 */
			private function onDeleteAllClick(event:Event):void {
				Alert.show("You want to delete all features. \nAre you sure ?", "Warning", Alert.YES | Alert.NO, null, alertDeleteHandler);
			}
			
			private function alertDeleteHandler(event:CloseEvent):void {
                // User click on "YES", he wants to apply changes
                if (event.detail==Alert.YES){
                	deleteAllFeatures(); 
                }                  
            }
            
            private function deleteAllFeatures():void{
            	drawLayer.clear();
				// clear the last feature
				selectFeatureHandler.lastfeature = null;
				// clear the selected feature tab
				selectFeatureHandler.selectFeatures = null;
				// there's no more selected feature
				selectFeatureHandler.selectFeauturesLength = 0;				
				switch(drawType)
				{
					case "path":{pathHandler.newFeature = true; break;}
					case "polygon":{polygonHandler.newFeature = true; break;}
				}
				btnDeleteSelected.enabled = false;
				btnMerge.enabled = false;
				//clear the information tab
				this.map.dispatchEvent(new FeatureEvent(FeatureEvent.FEATURE_UNSELECTED, new Array(this.selectFeatureHandler.currentfeature)));
            }
			
			/**
			 * User clicks on delete last feature button
			 */
			public function onDeleteLastClick(event:Event):void {
				var last:Number = drawLayer.features.length - 1;
				var lastFeature:Feature = null;
				
				if (last >= 0) {					
					lastFeature = drawLayer.features[last];
					drawLayer.removeFeature(drawLayer.features[last]);
								
					switch(drawType)
					{
						case "path":														
							if (last - 1 >= 0 && getQualifiedClassName(drawLayer.features[last-1].geometry) == "org.openscales.core.geometry::LineString") {
								pathHandler.lastPoint = drawLayer.features[last-1].geometry.getLastPoint();
							}
							else {pathHandler.newFeature = true;}
							break;	
												
						case "polygon":
							if (last-1 >= 0 && !polygonHandler.firstPointRemoved && !polygonHandler.newFeature) {
								drawLayer.removeFeature(drawLayer.features[last - 1]);
							}
							polygonHandler.newFeature = true;							
							break;
					}   
				}				
			}
						
			/**
			 * When a feature is selected
			 */
			private function onSelectFeature(event:FeatureEvent):void {											
				btnDeleteSelected.enabled = true;				
				selectFeatureHandler.OnSelection();
				//managing of btnDeleteSelected (in case there no more selected features)
				if(selectFeatureHandler.selectFeauturesLength==0){btnDeleteSelected.enabled = false;}
				//managing of btnMerge
				if(selectFeatureHandler.Comparison()){btnMerge.enabled = true;}
				else{btnMerge.enabled = false;}
			}
			
			private function onSelectBySelectBox(event:FeatureEvent):void{
				selectFeatureHandler.OnSelectionBySelectBox();
				if(selectFeatureHandler.selectFeauturesLength>0){
					btnDeleteSelected.enabled = true;
				}
				if(selectFeatureHandler.Comparison()){btnMerge.enabled = true;}
				else{btnMerge.enabled = false;}
			}
					
			/**
			 * Click on the togglebarbutton. Index button starts from 0.
			 */ 		
			private function clickHandler(event:ItemClickEvent):void{
				var handler:Number = event.index;		// handler is a number because of toggleButtonBar			
				switch(handler)
				{
					case 0:
						selectFeatureHandler.active = true;
						pointHandler.active = false;
						if(pathHandler.active){this.finishPath();}
						else if(polygonHandler.active){this.finishPolygon();}
						drawType = "";
						this.activeDrag();
						this.map.dispatchEvent(new DrawingEvent(DrawingEvent.DISABLED));
						this.map.dispatchEvent(new SpriteCursorEvent(SpriteCursorEvent.SPRITECURSOR_SHOW_HAND));
						break;
					
					case 1:		//click on button point
						if(drawType!="point"){
							if(pathHandler.active){this.finishPath();}
							else if(polygonHandler.active){this.finishPolygon();}												
							pointHandler.active = true;
							drawType = "point";
						}
						this.deactiveDrag();
						selectFeatureHandler.active = false;
						this.map.dispatchEvent(new DrawingEvent(DrawingEvent.ENABLED));
						this.map.dispatchEvent(new SpriteCursorEvent(SpriteCursorEvent.SPRITECURSOR_HIDE_HAND));					
						break;
					
					case 2:		//click on button path
						if(drawType!="path"){
							if(polygonHandler.active){this.finishPolygon();}						
							pointHandler.active = false;
							pathHandler.active = true;
							drawType = "path";
						}
						this.deactiveDrag();
						selectFeatureHandler.active = false;
						this.map.dispatchEvent(new DrawingEvent(DrawingEvent.ENABLED));
						this.map.dispatchEvent(new SpriteCursorEvent(SpriteCursorEvent.SPRITECURSOR_HIDE_HAND));					
						break;
						
					case 3:		//click on button polygon
						if(drawType!="polygon"){
							if(pathHandler.active){this.finishPath();}						
							pointHandler.active = false;
							polygonHandler.active = true;
							drawType = "polygon";
						}
						this.deactiveDrag();
						selectFeatureHandler.active = false;
						this.map.dispatchEvent(new DrawingEvent(DrawingEvent.ENABLED));
						this.map.dispatchEvent(new SpriteCursorEvent(SpriteCursorEvent.SPRITECURSOR_HIDE_HAND));
						break;
				}
			}			
			
			/**
			 * Finish a polygon
			 * Force to finalyse a polygon (even it's not finished)
			 */
			public function finishPolygon():void{
				polygonHandler.drawFinalPoly();
				polygonHandler.active = false;
			}
			
			/**
			 * Finish a path
			 * Force to finalyse a path (event it's not finished)
			 */
			public function finishPath():void{
				pathHandler.drawFinalPath();
				pathHandler.active = false;
			}
			
			/**
			 * Active paning
			 * User can pan the map
			 */
			public function activeDrag():void{
				var handler:Handler;
				for each(handler in this.map.handlers){
					if(handler is DragHandler){
						handler.active = true;
					}
				} 
			}
			/**
			 * Deactive paning
			 * User can't pan map anymore
			 */
			public function deactiveDrag():void{
				var handler:Handler;
				for each(handler in this.map.handlers){
					if(handler is DragHandler){
						handler.active = false;
					} 
				}
			}			
			
			//Getters and setters
			public function get drawType():String{
				return _drawType;
			}
			public function set drawType(value:String):void{
				_drawType = value;
			}
			
			public function get indexTabDrawing():Number{
				return _indexTabDrawing;
			}
			public function set indexTabDrawing(value:Number):void{
				_indexTabDrawing = value;
			}
			
			public function get isDragging():Boolean{
				return _isDragging;
			}
			public function set isDragging(value:Boolean):void{
				_isDragging = value;
			}
			
			
			override public function set map(value:Map):void {
				super.map = value;
				
				if (this.map != null) {
					pointHandler.map = this.map;
					pathHandler.map = this.map;
					polygonHandler.map = this.map;
					this.map.addLayer(drawLayer);
					this.map.addHandler(selectFeatureHandler);																			
				}			
			}		
		]]>
	</mx:Script>
	<mx:Glow id="glowImage" alphaFrom="1" alphaTo="1" blurXFrom="0.0" blurXTo="15.0" blurYFrom="0.0" blurYTo="15.0" color="0xC0FF0C"/>
	<mx:ToggleButtonBar x="44" y="10" horizontalGap="5" itemClick="clickHandler(event);" horizontalAlign="center" selectedIndex="0" id="tgBar" height="31" width="186">
		<mx:Array>
			<mx:Object icon="@Embed('/org/openscales/component/images/IconeMouvement.swf')" id="btnMouvement" toolTip="Pan the map"/>
			<mx:Object icon="@Embed('/org/openscales/component/images/IconeDessinPoint.swf')" id="btnPoint" toolTip="Draw a point"/>
			<mx:Object icon="@Embed('/org/openscales/component/images/IconeDessinLigne.swf')" id="btnPath" toolTip="Draw a path"/>
			<mx:Object icon="@Embed('/org/openscales/component/images/IconeDessinPoly.swf')" id="btnPolygon" toolTip="Draw a polygon"/>
		</mx:Array>
	</mx:ToggleButtonBar>
	
	<mx:Button x="46" y="49" icon="@Embed('/org/openscales/component/images/merge_small.png')" id="btnMerge" click="this.OnMergeClick(event)" width="38" toolTip="Merge features selected" enabled="false" height="38"/>
	<mx:Button x="95" y="49" icon="@Embed('/org/openscales/component/images/delete_all_small.png')" id="btnDeleteAll" click="this.onDeleteAllClick(event)" width="38" toolTip="Delete all drawing feature on the map" height="38"/>
	<mx:Button x="143" y="49" icon="@Embed('/org/openscales/component/images/delete_last_small.png')" id="btnDeleteLast" click="this.onDeleteLastClick(event)" width="38" toolTip="Delete the last drawing feature" height="38"/>
	<mx:Button x="190" y="49" icon="@Embed('/org/openscales/component/images/delete_selected_small.png')" id="btnDeleteSelected" click="this.onDeleteSelectedClick(event)" width="38" enabled="false" toolTip="Delete all selected features" height="38"/>
</control:Control>
