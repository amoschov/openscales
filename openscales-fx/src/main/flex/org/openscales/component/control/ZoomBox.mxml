<?xml version="1.0" encoding="utf-8"?>
<control:Control xmlns:mx="http://www.adobe.com/2006/mxml"
                 xmlns:control="org.openscales.component.control.*"
                 width="100%" height="100%">
    <mx:Script>
            <![CDATA[
            	import org.openscales.core.events.DrawingEvent;
                import org.openscales.core.Map;
                import org.openscales.core.basetypes.LonLat;
                import org.openscales.core.basetypes.Bounds;
                import org.openscales.core.basetypes.Pixel;
                import org.openscales.core.handler.Handler;
                import org.openscales.core.handler.mouse.DragHandler;

                /**
                * Coordinates of the top left corner (of the drawing rectangle)
                */
                private var TopLeftCorner:LonLat = null;
	            
	            /**
	            * Color of the rectangle
	            */
	            private var fillColor:uint = 0x660000
	            private var drawContainer:Sprite = new Sprite();     
                
                override public function set map(value:Map):void{
                    super.map = value;
                    map.addChild(drawContainer);
                }
				
				/**
				 * When the user click on the button ZoomBox
				 */
                private function onSelectZoomBox(e:Event) : void {
                	if(zoombox.selected == false){
                		zoombox.selected = true;
	                    deactiveDrag();
	                    map.addEventListener(MouseEvent.MOUSE_DOWN,startBox);
	            		map.addEventListener(MouseEvent.MOUSE_UP,endBox);
                	}
            		else{
						zoombox.selected = false;
		            	activeDrag();
		            	map.removeEventListener(MouseEvent.MOUSE_MOVE,expandArea);
	                	map.removeEventListener(MouseEvent.MOUSE_DOWN,startBox);
	               		map.removeEventListener(MouseEvent.MOUSE_UP,endBox);
					}
                }
				
                private function startBox(e:MouseEvent) : void {
                	map.addEventListener(MouseEvent.MOUSE_MOVE,expandArea);
                	drawContainer.graphics.beginFill(fillColor,0.5);
                	drawContainer.graphics.drawRect(map.mouseX,map.mouseY,1,1);
                	drawContainer.graphics.endFill();
              		this.TopLeftCorner = this.map.getLonLatFromMapPx(new Pixel(map.mouseX, map.mouseY));
                }

                private function endBox(e:MouseEvent) : void {
                	map.removeEventListener(MouseEvent.MOUSE_MOVE,expandArea);
               		map.removeEventListener(MouseEvent.MOUSE_DOWN,startBox);
               		map.removeEventListener(MouseEvent.MOUSE_UP,endBox);
               		drawContainer.graphics.clear();
               		var nowZoom:LonLat = this.map.getLonLatFromMapPx(new Pixel(map.mouseX, map.mouseY));
               		map.zoomToExtent(new Bounds(Math.min(TopLeftCorner.lon,nowZoom.lon),
               									Math.min(nowZoom.lat,TopLeftCorner.lat),
               									Math.max(TopLeftCorner.lon,nowZoom.lon),
               									Math.max(nowZoom.lat,TopLeftCorner.lat)));
               		this.TopLeftCorner = null;
	              	zoombox.selected = false;
	               	activeDrag();
                }

            	private function expandArea(e:MouseEvent) : void {
               		var ll:Pixel = map.getMapPxFromLonLat(TopLeftCorner);
             		drawContainer.graphics.clear();
                	drawContainer.graphics.beginFill(fillColor,0.5);
                	drawContainer.graphics.drawRect(ll.x,ll.y,map.mouseX - ll.x,map.mouseY - ll.y);
                	drawContainer.graphics.endFill();
            	}
			
				/**
			 	* Active paning
				* User can pan the map
			 	*/
            	public function activeDrag():void{
                	var handler:Handler;
                	for each(handler in this.map.handlers){
                    	if(handler is DragHandler){handler.active = true;}
                	}
            	}

				/**
			 	* Deactive paning
			 	* User can't pan map anymore
			 	*/
            	public function deactiveDrag():void{
                	var handler:Handler;
                	for each(handler in this.map.handlers){
                    	if(handler is DragHandler){handler.active = false;}
                	}
            	}
            ]]>
    </mx:Script>

    <mx:Button id="zoombox" label="ZoomBox" selected="false" click="onSelectZoomBox(event)"/>

</control:Control> 