<?xml version="1.0" encoding="utf-8"?>
<control:Control xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:control="org.openscales.component.control.*" 
	creationComplete="initInfo();" width="282" height="168">
	
	<mx:Script>
		<![CDATA[
			import org.openscales.core.geometry.LinearRing;
			import org.openscales.core.feature.VectorFeature;
			import org.openscales.core.geometry.Polygon;
			import org.openscales.core.geometry.LineString;
			import org.openscales.core.geometry.MultiLineString;
			import flash.utils.getQualifiedClassName;
			import mx.collections.ArrayCollection;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.Map;
			import org.openscales.core.feature.Feature;
			
			/**
			 * Attributes of the selected feature
			 */
			private var attributes:ArrayCollection;
			
			/**
			 * Params
			 * currentPoint : keep the current point in Path or polygon
			 * lastP : To prevent to show the same point twice (because of LineString)
			 */
			public var currentPoint:org.openscales.core.geometry.Point;
			public var lastP:org.openscales.core.geometry.Point;		
			
			/**
			 * Register events on creation
			 */
			public function initInfo():void{
				this.map.addEventListener(FeatureEvent.FEATURE_UNSELECTED, clearInformations);
			}
			
			/**
			 * Method which display the feature properties. We differenciate information with the feature : 
			 * with a point, we only have to show its name and Lon/Lat.
			 * with path, its name and all coordinates of each point in the path
			 * with polygon, same as path
			 */				
			public function showInfo(evt:FeatureEvent):void {
				//Properties
				var properties:Array = [];
				var name:Object;
				var pointNum:Number = 1; //indicate the number of the point (because point.id is too long)
				var first:Boolean = true; //indicate if it's the first point
				
				//point informations
				if(getQualifiedClassName((evt.feature as VectorFeature).geometry) == "org.openscales.core.geometry::Point"){
					name = {};
					name.Name = "Name";
					
					//we separate Lon and Lat only with point feature
					var coordinateLon:Object = {};
					var coordinateLat:Object = {};
									
					name.Value = "Point_" + evt.feature.name;
									
					coordinateLon.Name = "Lon";
					coordinateLon.Value = evt.feature.lonlat.lon;
					coordinateLat.Name = "Lat";
					coordinateLat.Value = evt.feature.lonlat.lat;
					
					//Add properties to array
					properties.push(name,coordinateLon,coordinateLat);				
				}
				
				//path informations
				else if(getQualifiedClassName((evt.feature as VectorFeature).geometry) == "org.openscales.core.geometry::MultiLineString"){					
					//Add the property NAME
					name = {};
					name.Name = "Name";					
					name.Value = evt.feature.name;
					properties.push(name);
					
					//MultiLineString = several LineString and LineString = 2 points					
					for each(var ls:LineString in ((evt.feature as VectorFeature).geometry as MultiLineString).components){
						for each(currentPoint in ls.components){
							//To prevent the same point twice
							var pointPath:Object = {};	//We use pointPath as object to put properties correctly
							if(first){
								lastP = currentPoint; first = false;
								pointPath.Name = "Point_" + pointNum; 
								pointPath.Value = currentPoint.x + ";" + currentPoint.y;
								properties.push(pointPath);
								pointNum++;
							}
							else if(lastP != currentPoint){							
								pointPath.Name = "Point_" + pointNum;
								pointPath.Value = currentPoint.x + ";" + currentPoint.y;
								properties.push(pointPath);
								lastP = currentPoint;
								pointNum++;
							}
						}	
					}
					pointNum=1;		
				}
				//polygon informations
				else if(getQualifiedClassName((evt.feature as VectorFeature).geometry) == "org.openscales.core.geometry::Polygon"){
					name = {};
					name.Name = "Name";
					name.Value = evt.feature.name;
					properties.push(name);
					
					for each(var lr:LinearRing in ((evt.feature as VectorFeature).geometry as Polygon).components){
						for each(currentPoint in lr.components){
							var pointPoly:Object = {};
							pointPoly.Name = "Point_" + pointNum; pointNum++;
							pointPoly.Value = currentPoint.x + ";" + currentPoint.y;
							properties.push(pointPoly);
						}
					}
					pointNum = 1; 	 									
				}
				else{
					// Only for WFS features (for the moment)
					for (var key:String in evt.feature.attributes) {	
						var property:Object = {};
						property.Name = key;
						property.Value = evt.feature.attributes[key];
						properties.push(property);				
					}
				}												
				attributes = new ArrayCollection(properties); 
				this.dgFeatureInfo.dataProvider = attributes;
				this.dgFeatureInfo.columns.sort();
			}
			
			/**
			 * Map setter 
			 * @param value The map
			 */
			override public function set map(value:Map):void {
				if (value != null) {
					super.map = value;				
				}
			}
			
			/**
			 * Update the tab when there is no more selected features
			 * @param event
			 */			
			private function clearInformations(event:FeatureEvent):void{
				this.dgFeatureInfo.dataProvider=null;
			}
			
		]]>
	</mx:Script>
	<mx:DataGrid x="10" y="10" width="262" height="148" id="dgFeatureInfo" editable="false">
		<mx:columns>
			<mx:DataGridColumn headerText="Property" dataField="Name" sortDescending="true" width="90"/>
			<mx:DataGridColumn headerText="Value" dataField="Value"/>
		</mx:columns>
	</mx:DataGrid>
</control:Control>