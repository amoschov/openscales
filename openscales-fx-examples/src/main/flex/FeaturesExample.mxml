<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:os="http://openscales.org"
	creationComplete="initMap();">
	
	<mx:Script>
		<![CDATA[
			import org.openscales.core.Map;
			import org.openscales.core.Trace;

			import org.openscales.core.feature.LineStringFeature;
			import org.openscales.core.feature.MultiLineStringFeature;
			import org.openscales.core.feature.MultiPointFeature;
			import org.openscales.core.feature.MultiPolygonFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.feature.PolygonFeature;
			import org.openscales.core.feature.Style;
			import org.openscales.core.feature.VectorFeature;
			import org.openscales.core.geometry.Collection;
			import org.openscales.core.geometry.Geometry;
			import org.openscales.core.geometry.LineString;
			import org.openscales.core.geometry.LinearRing;
			import org.openscales.core.geometry.MultiLineString;
			import org.openscales.core.geometry.MultiPoint;
			import org.openscales.core.geometry.MultiPolygon;
			import org.openscales.core.geometry.Point;
			import org.openscales.core.geometry.Polygon;
			import org.openscales.core.layer.VectorLayer;
import org.openscales.core.feature.Style;
				
			[Bindable] private var map:Map;

			private function initMap():void {
				map = fxmap.map;
				var layer:VectorLayer = SampleLayers.features();
				map.addLayer(layer);
				testContainsPoint(layer);
				testIntersects(layer);
			}
			
			/**
			 * Test all the containsPoint functions for the relevant géometries.
			 */
			public function testContainsPoint(layer:VectorLayer):void {
				// Useful variables for the tests
				var geom1:Geometry, geom2:Geometry;
				var testResult:Boolean, testExpectedResult:Boolean;
				var textResult:String;

				// LinearRing contains a Point : true
				testExpectedResult = true;
				geom1 = ((layer.getChildAt(9) as PolygonFeature).geometry as Collection).componentByIndex(0);
				geom2 = (layer.getChildAt(5) as PointFeature).geometry;
				testResult = (geom1 as LinearRing).containsPoint(geom2 as org.openscales.core.geometry.Point);
				textResult = "Does the outer LinearRing of the blue Polygon contain the red point (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// LinearRing contains a Point : false
				testExpectedResult = false;
				geom1 = ((layer.getChildAt(9) as PolygonFeature).geometry as Collection).componentByIndex(0);
				geom2 = (layer.getChildAt(0) as PointFeature).geometry;
				testResult = (geom1 as LinearRing).containsPoint(geom2 as org.openscales.core.geometry.Point);
				textResult = "Does the outer LinearRing of the blue Polygon contain the black point below the violet multipolygon (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// LinearRing contains a Point : false
				testExpectedResult = false;
				geom1 = ((layer.getChildAt(9) as PolygonFeature).geometry as Collection).componentByIndex(0);
				geom2 = (layer.getChildAt(2) as PointFeature).geometry;
				testResult = (geom1 as LinearRing).containsPoint(geom2 as org.openscales.core.geometry.Point);
				textResult = "Does the outer LinearRing of the blue Polygon contain the nearest black point (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// Polygon contains a Point without management of the holes : true
				testExpectedResult = true;
				geom1 = (layer.getChildAt(9) as PolygonFeature).geometry;
				geom2 = (layer.getChildAt(5) as PointFeature).geometry;
				testResult = (geom1 as Polygon).containsPoint(geom2 as org.openscales.core.geometry.Point, false);
				textResult = "Does the blue Polygon contain the red point without managing its holes (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// Polygon contains a Point with management of the holes : false
				testExpectedResult = false;
				geom1 = (layer.getChildAt(9) as PolygonFeature).geometry;
				geom2 = (layer.getChildAt(5) as PointFeature).geometry;
				testResult = (geom1 as Polygon).containsPoint(geom2 as org.openscales.core.geometry.Point);
				textResult = "Does the blue Polygon contain the red point without managing its holes (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
				
				// MultiPolygon contains a Point : true
				testExpectedResult = true;
				geom1 = ((layer.getChildAt(10) as MultiPolygonFeature).geometry as Collection).componentByIndex(0) as Collection;
				geom2 = (layer.getChildAt(0) as PointFeature).geometry;
				testResult = (geom1 as Polygon).containsPoint(geom2 as org.openscales.core.geometry.Point);
				textResult = "Does the violet MultiPolygon contain the upper black point (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
				
				// MultiPolygon contains a Point : false
				testExpectedResult = false;
				geom1 = ((layer.getChildAt(10) as MultiPolygonFeature).geometry as Collection).componentByIndex(0) as Collection;
				geom2 = (layer.getChildAt(1) as PointFeature).geometry;
				testResult = (geom1 as Polygon).containsPoint(geom2 as org.openscales.core.geometry.Point);
				textResult = "Does the violet MultiPolygon contain the lower black point (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
			}
			
			/**
			 * Test all the intersects functions for the relevant géometries.
			 */
			public function testIntersects(layer:VectorLayer):void {
				// Useful variables for the tests
				var geom1:Geometry, geom2:Geometry;
				var testResult:Boolean, testExpectedResult:Boolean;
				var textResult:String;
// TODO : check if the referenced geometries are the good ones using their indexes !!!
/*var style:Style = new Style();
style.fillColor = 0xFFFF00;
style.strokeColor = 0xFFFF00;
style.strokeWidth = 1;
(layer.getChildAt(9) as VectorFeature).style = style;*/

				// XXX intersects a XXX : true/false
				// TODO
			}
		]]>
	</mx:Script>
	
	<os:Map id="fxmap" width="100%" height="100%"
		proxy="http://openscales.org/proxy.php?url="
		zoom="11" lon="538850.47459" lat="5740916.1243">
			
		<os:Mapnik name="Mapnik"
			numZoomLevels="20"
			isBaseLayer="true"
			maxExtent="-20037508.34,-20037508.34,20037508.34,20037508.34"
			minResolution="0.5971642833709717"
			maxResolution="156543.0339" />

		<mx:Panel title="Drawing Tools" horizontalAlign="center">
			<os:FeatureDrawingComponent map="{map}"/>
			<os:SelectBoxComponent map="{map}" width="100%" />
		</mx:Panel>
											   
		<os:ClickHandler />
		<os:DragHandler />	   
		<os:WheelHandler />

		<os:MousePosition displayProjection="EPSG:4326"/>
	</os:Map>
	
	<os:TraceInfo id="traceBox" map="{map}" x="{width-200}" y="0" />

</mx:Canvas>